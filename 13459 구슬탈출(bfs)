```python

from collections import deque
def move(y,x,dy,dx):
    cnt = 0
    while grid[y+dy][x+dx] != '#' and grid[y][x] != 'O' :
        y = y+dy
        x = x+dx
        cnt+=1
    return y,x,cnt

def bfs(ry,rx,by,bx):
    q = deque()
    visit[origin_r_y][origin_r_x][origin_b_y][origin_b_x] = 1
    q.append([ry,rx,by,bx,0])

    while q :
        ry,rx,by,bx,round = q.popleft()
        if round >= 10 :
            return 0
        for dy,dx in ((0,1),(0,-1),(1,0),(-1,0)):
            nry,nrx,rcnt = move(ry,rx,dy,dx)
            nby, nbx,bcnt = move(by, bx, dy, dx)
            if grid[nby][nbx] == 'O': # 파란공이 먼저 빠지면 실패다.
                continue
            elif grid[nry][nrx] == 'O': # 현재 round 9 , round 10
                return 1

            if [nry,nrx] == [nby,nbx] :  #위치가 겹친경우
                if rcnt > bcnt : # b가먼저 도착한경우
                    nry,nrx = nry-dy,nrx-dx # 한칸이전으로 회귀
                else :
                    nby,nbx = nby-dy,nbx-dx
            if visit[nry][nrx][nby][nbx] :
                continue
            q.append([nry,nrx,nby,nbx,round + 1])
            visit[nry][nrx][nby][nbx] = 1

    return 0

n,m = map(int,input().split())
grid = [list(input()) for _ in range(n)]
visit = [[[[0]*m for _ in range(n)] for _ in range(m)] for _ in range(n)] # r,b
origin_r_x,origin_r_y,origin_b_x,origin_b_y = 0,0,0,0
for i in range(n):
    for j in range(m):
        if grid[i][j] == 'R' :
            origin_r_y,origin_r_x = i,j
            grid[i][j] = '.'
        if grid[i][j] == 'B':
            origin_b_y,origin_b_x = i,j
            grid[i][j] = '.'

print(bfs(origin_r_y,origin_r_x,origin_b_y,origin_b_x))

```
